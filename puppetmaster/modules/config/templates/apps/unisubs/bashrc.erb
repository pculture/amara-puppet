shopt -s expand_aliases

[ -z "$PS1" ] && NOINTERACTIVE=1

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

PS1='\n${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
unset color_prompt force_color_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Unisubs-specific stuff ------------------------------------------------------
export PYTHONDONTWRITEBYTECODE=1

alias cu='cd <%= @project_dir %>'
alias cv='cd <%= @project_dir %>'
alias so='source ./venv/bin/activate'
alias s='cu && so'
alias go='cu && so && ./bin/dev-runserver.sh plus'
alias d='./bin/dev-runserver.sh plus'
alias us='sudo deploy/update_solr_schema_vagrant.sh'
alias clean_unisubs_messages='rm /tmp/unisubs-messages/*.log'
alias preparetestdb='python manage.py syncdb --all --settings=dev_settings_test --noinput; python manage.py migrate --fake --settings=dev_settings_test'

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

export PATH=<%= @project_dir %>/bin:~/bin:$PATH
export DISPLAY=:99

function pm {
    python manage.py $* --settings=dev_settings
}
function pmt {
    python manage.py test $* --settings=dev_settings_test
}
function pmtd {
    python manage.py test $* --settings=dev_settings_test 2>&1 | discoball -o '.+Error:.*' '.+Exception: .+' 'line \d+'
}
function pms {
    python manage.py test $* --settings=dev_settings_selenium
}
function dbdump {
    if [ "$1" = "" ]; then echo "You must specify a filename"; return; fi
    cu ; mysqldump -uroot -proot unisubs > $1
}
function dbrestore {
    if [ ! -e "$1" ]; then echo "You must specify a restore file"; return; fi
    mysql -uroot -proot unisubs < $1
}

# ps-grep
function psg {
    ps auxww | grep --color=always $* | grep -v grep | sed -e 's/  */ /g' | cut -d' ' -f 2,11-
}

# If not running interactively, we're done.
[ -n "$NOINTERACTIVE" ] && return

# Otherwise on login, drop us on the working directory with the venv activated
cd <%= @project_dir %>/
if [ -e "<%= @ve_dir %>" ]; then source <%= @ve_dir %>/bin/activate; fi

